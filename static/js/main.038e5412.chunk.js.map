{"version":3,"sources":["tracks.js","App.js","serviceWorker.js","index.js","githubIcon.svg"],"names":["tracks","keyCode","keyTrigger","id","url","App","state","volume","display","btnMap","React","createRef","togglePlay","e","preventDefault","trackObj","filter","obj","target","children","play","setState","handlePress","button","current","childNodes","item","className","btn","parseInt","attributes","keycode","value","length","handleChange","buttons","map","onClick","key","preload","src","onKeyDown","this","tabIndex","ref","type","min","max","onChange","href","rel","github","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.038e5412.chunk.js","sourcesContent":["const tracks = [\r\n  {\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\r\n  },\r\n  {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\r\n  },\r\n  {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\r\n  },\r\n  {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\r\n  },\r\n  {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\r\n  },\r\n  {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\r\n  },\r\n  {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\r\n  },\r\n  {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\r\n  },\r\n  {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\r\n  },\r\n];\r\n\r\nexport default tracks;\r\n","import React, { Component } from 'react';\nimport tracks from './tracks';\nimport github from './githubIcon.svg';\n\nexport class App extends Component {\n  state = {\n    volume: 50,\n    display: 'Welcome to my Drum Machine',\n  };\n\n  btnMap = React.createRef();\n\n  togglePlay = (e) => {\n    e.preventDefault();\n    const trackObj = tracks.filter((obj) => obj.id === e.target.id);\n    e.target.children[0].volume = this.state.volume / 100;\n    e.target.children[0].play();\n    this.setState({\n      display: trackObj[0].id,\n    });\n  };\n\n  handlePress = (e) => {\n    e.preventDefault();\n    const buttons = [...this.btnMap.current.childNodes].filter(\n      (item) => item.className === 'drum-pad'\n    );\n    const button = buttons.filter(\n      (btn) => parseInt(btn.attributes.keycode.value) === e.keyCode\n    );\n    if (button.length > 0) {\n      button[0].childNodes[0].volume = this.state.volume / 100;\n      button[0].childNodes[0].play();\n      this.setState({ display: button[0].id });\n    }\n  };\n\n  handleChange = (e) => {\n    const { value } = e.target;\n    this.setState({ volume: value, display: `Volume: ${value}` });\n  };\n\n  render() {\n    const buttons = tracks.map((obj) => {\n      return (\n        <button\n          className=\"drum-pad\"\n          id={obj.id}\n          onClick={this.togglePlay}\n          keycode={obj.keyCode}\n          key={obj.id}\n        >\n          <audio\n            className=\"clip\"\n            id={obj.keyTrigger}\n            preload=\"auto\"\n            src={obj.url}\n          ></audio>\n          {obj.keyTrigger}\n        </button>\n      );\n    });\n    return (\n      <div className=\"App\" onKeyDown={this.handlePress} tabIndex={-1}>\n        <h1>Drum Machine!</h1>\n        <div id=\"drum-machine\">\n          <div id=\"display\">{this.state.display}</div>\n          <div className=\"buttons-container\" ref={this.btnMap}>\n            {buttons}\n          </div>\n          <div className=\"slide-container\">\n            <span className=\"material-icons\">volume_down</span>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={this.state.volume}\n              className=\"slider\"\n              onChange={this.handleChange}\n            ></input>\n            <span className=\"material-icons\">volume_up</span>\n            <br />\n          </div>\n        </div>\n        <div className=\"credits\">\n          <p>Designed and Coded By</p>\n          <a\n            href=\"https://github.com/pomubry\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src={github} alt=\"github icon\" />\n            Bryan Taduran\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/githubIcon.0a3a0978.svg\";"],"sourceRoot":""}